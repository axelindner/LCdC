<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title> Generador Educativo Lindner</title>
<style>
  body { font-family: Arial, max-width: 600px; margin: 20px auto; padding: 0 10px; }
  textarea, select, button { width: 100%; margin-top: 1rem; padding: 0.5rem; font-size: 1rem; }
  pre { background: #f4f4f4; padding: 1rem; margin-top: 1rem; white-space: pre-wrap; border-radius: 5px; max-height: 500px; overflow-y: auto; }
  label { font-weight: bold; margin-top: 1rem; display: block; }
  #spinner {
    display: none;
    margin-top: 10px;
    font-weight: bold;
    color: #0077cc;
  }
</style>
<script src="https://cdnjs.cloudflare.com/ajax/libs/PptxGenJS/3.9.0/pptxgen.bundle.js"></script>

</head>
<body>

<h1>Generador Educativo Lindner</h1>

<label for="tema">Tema:</label>
<textarea id="tema" rows="3" placeholder="Ejemplo: La Revolución Industrial"></textarea>

<label for="tipo">Tipo de contenido:</label>
<select id="tipo">
  <option value="plan anual">Planificación anual</option>
  <option value="planificación diaria">Planificación diaria</option>
  <option value="planificación trimestral">Planificación trimestral</option>
  <option value="secuencia didáctica">Secuencia didáctica</option>
  <option value="resumen">Resumen</option>
  <option value="examen">Examen</option>
  <option value="crucigrama">Crucigrama</option>
  <option value="corrección ortográfica">Corrección ortográfica</option>
  <option value="proyecto educativo">Creación de proyecto</option>
  <option value="corrector de preguntas">Corrector de preguntas</option>
  <option value="simulador de examen">Simulador de examen</option>
  <option value="linea de tiempo">linea de tiempo</option>
  <option value="=Red conceptual">Red conceptual</option>
  <option value="=Documentos De trabajo">Documentos De Trabajo</option>
</select>

<button id="generarBtn">Generar</button>
<div id="spinner">Generando contenido, por favor espera...</div>

<pre id="resultado"></pre>



<script>
  const API_KEY = "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";  // <-- PONÉ TU API KEY AQUÍ (NO COMPARTAS ESTE ARCHIVO)

  const btn = document.getElementById('generarBtn');
  const resultado = document.getElementById('resultado');
  const spinner = document.getElementById('spinner');

  btn.addEventListener('click', async () => {
    const tema = document.getElementById('tema').value.trim();
    const tipo = document.getElementById('tipo').value;

    if (!tema) {
      alert('Ingresá un tema');
      return;
    }

    resultado.textContent = '';
    spinner.style.display = 'block';
    btn.disabled = true;

    try {
      const prompt = `Genera un contenido educativo detallado para el tema "${tema}". El tipo de contenido requerido es: ${tipo}. Por favor, crea un texto claro, estructurado y útil para docentes.`;

      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${API_KEY}`
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          messages: [{ role: "user", content: prompt }],
          temperature: 0.7,
          max_tokens: 1500,
        })
      });

      if (!response.ok) {
        const err = await response.json();
        resultado.textContent = `Error: ${err.error.message || 'Error desconocido'}`;
        return;
      }

      const data = await response.json();
      const text = data.choices[0].message.content.trim();
      resultado.textContent = text;

    } catch (e) {
      resultado.textContent = 'Error al conectar con OpenAI: ' + e.message;
    } finally {
      spinner.style.display = 'none';
      btn.disabled = false;
    }
  });
  document.getElementById('exportarPDF').addEventListener('click', () => {
  const contenido = document.getElementById('resultado');
  const opt = {
    margin:       0.5,
    filename:     'contenido-educativo.pdf',
    image:        { type: 'jpeg', quality: 0.98 },
    html2canvas:  { scale: 2 },
    jsPDF:        { unit: 'in', format: 'letter', orientation: 'portrait' }
  };
  html2pdf().set(opt).from(contenido).save();
});

</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
<script>
function exportarADoc() {
  const text = document.getElementById("resultado").textContent;
  const blob = new Blob([text], { type: "application/msword" });
  const url = URL.createObjectURL(blob);

  const a = document.createElement("a");
  a.href = url;
  a.download = "contenido_educativo.doc";
  a.click();

  URL.revokeObjectURL(url);
}
</script>

<button onclick="exportarADoc()">Descargar como Word (.doc)</button>

<script>
  function generarPPT() {
    const pptx = new PptxGenJS();
    const slide = pptx.addSlide();

    // Obtené texto de algún elemento de tu HTML
    const titulo = document.querySelector("#titulo")?.value || "Título automático";
    const contenido = document.querySelector("#contenido")?.value || "Contenido generado automáticamente.";

    slide.addText(titulo, { x: 0.5, y: 0.5, fontSize: 24, bold: true, color: '003366' });
    slide.addText(contenido, { x: 0.5, y: 1.5, fontSize: 18, color: '000000' });

    pptx.writeFile("presentacion-generada.pptx");
  }
</script>


</body>
</html>
